#include <stdio.h>
struct Process
 {
    int id;         
    int arrival;
    int burst;      
    int waiting;    
    int turnaround; 
};
void roundRobin(struct Process processes[], int n, int timeQuantum) {
    int remainingProcesses = n;  
    int currentTime = 0;         
    int i;
    int remainingBurst[n];
    for (i = 0; i < n; i++)
        remainingBurst[i] = processes[i].burst;
    while (remainingProcesses > 0) {
        for (i = 0; i < n; i++) {
            if (remainingBurst[i] > 0) {
                int executeTime = (remainingBurst[i] > timeQuantum) ? timeQuantum : remainingBurst[i];
                remainingBurst[i] -= executeTime;
                currentTime += executeTime;
                if (remainingBurst[i] == 0) 
                {  
                    remainingProcesses--;
                    processes[i].turnaround = currentTime - processes[i].arrival;
                    processes[i].waiting = processes[i].turnaround - processes[i].burst;
                }
            }
        }
}
    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].arrival, 
               processes[i].burst, processes[i].waiting, processes[i].turnaround);
    }
}
int main() {
    int n, i, timeQuantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }
    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);
    roundRobin(processes, n, timeQuantum);

return 0;
}
